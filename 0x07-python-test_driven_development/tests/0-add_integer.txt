
Instructions for function 0-add_integer.py


This module defines set instructions for function ``add_integer(a, b=98)``.

How to use it:


``add_integer(...)``` function outputs the addition of its two arguments. For integers,
the function is the same like using the '+' operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(5, 5)
    10

::

    >>> add_integer(5, -10)
    -5

Function works with floating integers.

::

    >>> add_integer(3.0, 6.0)
    9

float points are typecasted into ints before the sum.

::

    >>> add_integer(5.3, 0.8)
    5

::

    >>> add_integer(-5.2, -0.6)
    -5

Non_float and float numbers can be added to get a total sum.

::

    >>> add_integer(5.5, -8)
    -3

The second argument is optional - by default, it is 98.

::

    >>> add_integer(2)
    100

Application on Non_integers:


``add_integer()`` function needs both values to be integers or floats.
If either value is a non_integer and non_float, a TypeError is raised:

::

    >>> add_integer("text", 16)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(4, "call")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(85.8, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

In a case where both values are non_integers and non_floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("call", "maybe")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

